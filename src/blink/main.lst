                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Oct 19 20:58:05 2020
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; Stack segment in internal ram 
                                     23 ;--------------------------------------------------------
                                     24 	.area	SSEG
      000000                         25 __start__stack:
      000000                         26 	.ds	1
                                     27 
                                     28 ;--------------------------------------------------------
                                     29 ; absolute external ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DABS (ABS)
                                     32 ;--------------------------------------------------------
                                     33 ; interrupt vector 
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
      000000                         36 __interrupt_vect:
      000000 82v00u00u00             37 	int s_GSINIT ;reset
      000004 82 00 00 00             38 	int 0x0000 ;trap
      000008 82 00 00 00             39 	int 0x0000 ;int0
      00000C 82 00 00 00             40 	int 0x0000 ;int1
      000010 82 00 00 00             41 	int 0x0000 ;int2
      000014 82 00 00 00             42 	int 0x0000 ;int3
      000018 82 00 00 00             43 	int 0x0000 ;int4
      00001C 82 00 00 00             44 	int 0x0000 ;int5
      000020 82 00 00 00             45 	int 0x0000 ;int6
      000024 82 00 00 00             46 	int 0x0000 ;int7
      000028 82 00 00 00             47 	int 0x0000 ;int8
      00002C 82 00 00 00             48 	int 0x0000 ;int9
      000030 82 00 00 00             49 	int 0x0000 ;int10
      000034 82 00 00 00             50 	int 0x0000 ;int11
      000038 82 00 00 00             51 	int 0x0000 ;int12
      00003C 82 00 00 00             52 	int 0x0000 ;int13
      000040 82 00 00 00             53 	int 0x0000 ;int14
      000044 82 00 00 00             54 	int 0x0000 ;int15
      000048 82 00 00 00             55 	int 0x0000 ;int16
      00004C 82 00 00 00             56 	int 0x0000 ;int17
      000050 82 00 00 00             57 	int 0x0000 ;int18
      000054 82 00 00 00             58 	int 0x0000 ;int19
      000058 82 00 00 00             59 	int 0x0000 ;int20
      00005C 82 00 00 00             60 	int 0x0000 ;int21
      000060 82 00 00 00             61 	int 0x0000 ;int22
      000064 82 00 00 00             62 	int 0x0000 ;int23
      000068 82 00 00 00             63 	int 0x0000 ;int24
      00006C 82 00 00 00             64 	int 0x0000 ;int25
      000070 82 00 00 00             65 	int 0x0000 ;int26
      000074 82 00 00 00             66 	int 0x0000 ;int27
      000078 82 00 00 00             67 	int 0x0000 ;int28
      00007C 82 00 00 00             68 	int 0x0000 ;int29
                                     69 ;--------------------------------------------------------
                                     70 ; global & static initialisations
                                     71 ;--------------------------------------------------------
                                     72 	.area HOME
                                     73 	.area GSINIT
                                     74 	.area GSFINAL
                                     75 	.area GSINIT
      000000                         76 __sdcc_gs_init_startup:
      000000                         77 __sdcc_init_data:
                                     78 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   79 	ldw x, #l_DATA
      000003 27 07            [ 1]   80 	jreq	00002$
      000005                         81 00001$:
      000005 72 4FuFFuFF      [ 1]   82 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   83 	decw x
      00000A 26 F9            [ 1]   84 	jrne	00001$
      00000C                         85 00002$:
      00000C AEr00r00         [ 2]   86 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   87 	jreq	00004$
      000011                         88 00003$:
      000011 D6uFFuFF         [ 1]   89 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   90 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   91 	decw	x
      000018 26 F7            [ 1]   92 	jrne	00003$
      00001A                         93 00004$:
                                     94 ; stm8_genXINIT() end
                                     95 	.area GSFINAL
      000000 CCr00r80         [ 2]   96 	jp	__sdcc_program_startup
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
                                    101 	.area HOME
      000080                        102 __sdcc_program_startup:
      000080 CCr00r43         [ 2]  103 	jp	_main
                                    104 ;	return from main will return to caller
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area CODE
                                    109 ;	main.c: 14: static inline void delay_ms(uint16_t ms){
                                    110 ;	-----------------------------------------
                                    111 ;	 function delay_ms
                                    112 ;	-----------------------------------------
      000000                        113 _delay_ms:
      000000 52 08            [ 2]  114 	sub	sp, #8
                                    115 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      000002 5F               [ 1]  116 	clrw	x
      000003 1F 03            [ 2]  117 	ldw	(0x03, sp), x
      000005 1F 01            [ 2]  118 	ldw	(0x01, sp), x
      000007                        119 00103$:
      000007 16 0B            [ 2]  120 	ldw	y, (0x0b, sp)
      000009 5F               [ 1]  121 	clrw	x
      00000A 90 89            [ 2]  122 	pushw	y
      00000C 89               [ 2]  123 	pushw	x
      00000D 4B 58            [ 1]  124 	push	#0x58
      00000F 5F               [ 1]  125 	clrw	x
      000010 89               [ 2]  126 	pushw	x
      000011 4B 00            [ 1]  127 	push	#0x00
      000013 CDr00r00         [ 4]  128 	call	__mullong
      000016 5B 08            [ 2]  129 	addw	sp, #8
      000018 1F 07            [ 2]  130 	ldw	(0x07, sp), x
      00001A 17 05            [ 2]  131 	ldw	(0x05, sp), y
      00001C 1E 03            [ 2]  132 	ldw	x, (0x03, sp)
      00001E 13 07            [ 2]  133 	cpw	x, (0x07, sp)
      000020 7B 02            [ 1]  134 	ld	a, (0x02, sp)
      000022 12 06            [ 1]  135 	sbc	a, (0x06, sp)
      000024 7B 01            [ 1]  136 	ld	a, (0x01, sp)
      000026 12 05            [ 1]  137 	sbc	a, (0x05, sp)
      000028 24 16            [ 1]  138 	jrnc	00105$
                                    139 ;	main.c: 17: __asm__("nop");
      00002A 9D               [ 1]  140 	nop
                                    141 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      00002B 1E 03            [ 2]  142 	ldw	x, (0x03, sp)
      00002D 1C 00 01         [ 2]  143 	addw	x, #0x0001
      000030 1F 03            [ 2]  144 	ldw	(0x03, sp), x
      000032 7B 02            [ 1]  145 	ld	a, (0x02, sp)
      000034 A9 00            [ 1]  146 	adc	a, #0x00
      000036 6B 02            [ 1]  147 	ld	(0x02, sp), a
      000038 7B 01            [ 1]  148 	ld	a, (0x01, sp)
      00003A A9 00            [ 1]  149 	adc	a, #0x00
      00003C 6B 01            [ 1]  150 	ld	(0x01, sp), a
      00003E 20 C7            [ 2]  151 	jra	00103$
      000040                        152 00105$:
      000040 5B 08            [ 2]  153 	addw	sp, #8
      000042 81               [ 4]  154 	ret
                                    155 ;	main.c: 21: void main(){
                                    156 ;	-----------------------------------------
                                    157 ;	 function main
                                    158 ;	-----------------------------------------
      000043                        159 _main:
                                    160 ;	main.c: 22: PB_DDR |= (1 << LED_PIN);
      000043 AE 50 07         [ 2]  161 	ldw	x, #0x5007
      000046 F6               [ 1]  162 	ld	a, (x)
      000047 AA 20            [ 1]  163 	or	a, #0x20
      000049 F7               [ 1]  164 	ld	(x), a
                                    165 ;	main.c: 23: PB_CR1 |= (1 << LED_PIN);
      00004A AE 50 08         [ 2]  166 	ldw	x, #0x5008
      00004D F6               [ 1]  167 	ld	a, (x)
      00004E AA 20            [ 1]  168 	or	a, #0x20
      000050 F7               [ 1]  169 	ld	(x), a
                                    170 ;	main.c: 25: while (1) {
      000051                        171 00102$:
                                    172 ;	main.c: 26: PB_ODR ^= (1 << LED_PIN);
      000051 AE 50 05         [ 2]  173 	ldw	x, #0x5005
      000054 F6               [ 1]  174 	ld	a, (x)
      000055 A8 20            [ 1]  175 	xor	a, #0x20
      000057 F7               [ 1]  176 	ld	(x), a
                                    177 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      000058 90 5F            [ 1]  178 	clrw	y
      00005A 5F               [ 1]  179 	clrw	x
      00005B                        180 00107$:
      00005B 90 A3 57 C0      [ 2]  181 	cpw	y, #0x57c0
      00005F 9F               [ 1]  182 	ld	a, xl
      000060 A2 01            [ 1]  183 	sbc	a, #0x01
      000062 9E               [ 1]  184 	ld	a, xh
      000063 A2 00            [ 1]  185 	sbc	a, #0x00
      000065 24 EA            [ 1]  186 	jrnc	00102$
                                    187 ;	main.c: 17: __asm__("nop");
      000067 9D               [ 1]  188 	nop
                                    189 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      000068 72 A9 00 01      [ 2]  190 	addw	y, #0x0001
      00006C 9F               [ 1]  191 	ld	a, xl
      00006D A9 00            [ 1]  192 	adc	a, #0x00
      00006F 02               [ 1]  193 	rlwa	x
      000070 A9 00            [ 1]  194 	adc	a, #0x00
      000072 95               [ 1]  195 	ld	xh, a
      000073 20 E6            [ 2]  196 	jra	00107$
                                    197 ;	main.c: 27: delay_ms(DELAY);
      000075 81               [ 4]  198 	ret
                                    199 	.area CODE
                                    200 	.area INITIALIZER
                                    201 	.area CABS (ABS)
