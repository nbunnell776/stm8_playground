                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Oct 19 20:58:05 2020
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; Stack segment in internal ram 
                                     23 ;--------------------------------------------------------
                                     24 	.area	SSEG
      000001                         25 __start__stack:
      000001                         26 	.ds	1
                                     27 
                                     28 ;--------------------------------------------------------
                                     29 ; absolute external ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DABS (ABS)
                                     32 ;--------------------------------------------------------
                                     33 ; interrupt vector 
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
      008000                         36 __interrupt_vect:
      008000 82 00 80 83             37 	int s_GSINIT ;reset
      008004 82 00 00 00             38 	int 0x0000 ;trap
      008008 82 00 00 00             39 	int 0x0000 ;int0
      00800C 82 00 00 00             40 	int 0x0000 ;int1
      008010 82 00 00 00             41 	int 0x0000 ;int2
      008014 82 00 00 00             42 	int 0x0000 ;int3
      008018 82 00 00 00             43 	int 0x0000 ;int4
      00801C 82 00 00 00             44 	int 0x0000 ;int5
      008020 82 00 00 00             45 	int 0x0000 ;int6
      008024 82 00 00 00             46 	int 0x0000 ;int7
      008028 82 00 00 00             47 	int 0x0000 ;int8
      00802C 82 00 00 00             48 	int 0x0000 ;int9
      008030 82 00 00 00             49 	int 0x0000 ;int10
      008034 82 00 00 00             50 	int 0x0000 ;int11
      008038 82 00 00 00             51 	int 0x0000 ;int12
      00803C 82 00 00 00             52 	int 0x0000 ;int13
      008040 82 00 00 00             53 	int 0x0000 ;int14
      008044 82 00 00 00             54 	int 0x0000 ;int15
      008048 82 00 00 00             55 	int 0x0000 ;int16
      00804C 82 00 00 00             56 	int 0x0000 ;int17
      008050 82 00 00 00             57 	int 0x0000 ;int18
      008054 82 00 00 00             58 	int 0x0000 ;int19
      008058 82 00 00 00             59 	int 0x0000 ;int20
      00805C 82 00 00 00             60 	int 0x0000 ;int21
      008060 82 00 00 00             61 	int 0x0000 ;int22
      008064 82 00 00 00             62 	int 0x0000 ;int23
      008068 82 00 00 00             63 	int 0x0000 ;int24
      00806C 82 00 00 00             64 	int 0x0000 ;int25
      008070 82 00 00 00             65 	int 0x0000 ;int26
      008074 82 00 00 00             66 	int 0x0000 ;int27
      008078 82 00 00 00             67 	int 0x0000 ;int28
      00807C 82 00 00 00             68 	int 0x0000 ;int29
                                     69 ;--------------------------------------------------------
                                     70 ; global & static initialisations
                                     71 ;--------------------------------------------------------
                                     72 	.area HOME
                                     73 	.area GSINIT
                                     74 	.area GSFINAL
                                     75 	.area GSINIT
      008083                         76 __sdcc_gs_init_startup:
      008083                         77 __sdcc_init_data:
                                     78 ; stm8_genXINIT() start
      008083 AE 00 00         [ 2]   79 	ldw x, #l_DATA
      008086 27 07            [ 1]   80 	jreq	00002$
      008088                         81 00001$:
      008088 72 4F 00 00      [ 1]   82 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]   83 	decw x
      00808D 26 F9            [ 1]   84 	jrne	00001$
      00808F                         85 00002$:
      00808F AE 00 00         [ 2]   86 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]   87 	jreq	00004$
      008094                         88 00003$:
      008094 D6 81 91         [ 1]   89 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 00         [ 1]   90 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]   91 	decw	x
      00809B 26 F7            [ 1]   92 	jrne	00003$
      00809D                         93 00004$:
                                     94 ; stm8_genXINIT() end
                                     95 	.area GSFINAL
      00809D CC 80 80         [ 2]   96 	jp	__sdcc_program_startup
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
                                    101 	.area HOME
      008080                        102 __sdcc_program_startup:
      008080 CC 80 E3         [ 2]  103 	jp	_main
                                    104 ;	return from main will return to caller
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area CODE
                                    109 ;	main.c: 14: static inline void delay_ms(uint16_t ms){
                                    110 ;	-----------------------------------------
                                    111 ;	 function delay_ms
                                    112 ;	-----------------------------------------
      0080A0                        113 _delay_ms:
      0080A0 52 08            [ 2]  114 	sub	sp, #8
                                    115 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      0080A2 5F               [ 1]  116 	clrw	x
      0080A3 1F 03            [ 2]  117 	ldw	(0x03, sp), x
      0080A5 1F 01            [ 2]  118 	ldw	(0x01, sp), x
      0080A7                        119 00103$:
      0080A7 16 0B            [ 2]  120 	ldw	y, (0x0b, sp)
      0080A9 5F               [ 1]  121 	clrw	x
      0080AA 90 89            [ 2]  122 	pushw	y
      0080AC 89               [ 2]  123 	pushw	x
      0080AD 4B 58            [ 1]  124 	push	#0x58
      0080AF 5F               [ 1]  125 	clrw	x
      0080B0 89               [ 2]  126 	pushw	x
      0080B1 4B 00            [ 1]  127 	push	#0x00
      0080B3 CD 81 16         [ 4]  128 	call	__mullong
      0080B6 5B 08            [ 2]  129 	addw	sp, #8
      0080B8 1F 07            [ 2]  130 	ldw	(0x07, sp), x
      0080BA 17 05            [ 2]  131 	ldw	(0x05, sp), y
      0080BC 1E 03            [ 2]  132 	ldw	x, (0x03, sp)
      0080BE 13 07            [ 2]  133 	cpw	x, (0x07, sp)
      0080C0 7B 02            [ 1]  134 	ld	a, (0x02, sp)
      0080C2 12 06            [ 1]  135 	sbc	a, (0x06, sp)
      0080C4 7B 01            [ 1]  136 	ld	a, (0x01, sp)
      0080C6 12 05            [ 1]  137 	sbc	a, (0x05, sp)
      0080C8 24 16            [ 1]  138 	jrnc	00105$
                                    139 ;	main.c: 17: __asm__("nop");
      0080CA 9D               [ 1]  140 	nop
                                    141 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      0080CB 1E 03            [ 2]  142 	ldw	x, (0x03, sp)
      0080CD 1C 00 01         [ 2]  143 	addw	x, #0x0001
      0080D0 1F 03            [ 2]  144 	ldw	(0x03, sp), x
      0080D2 7B 02            [ 1]  145 	ld	a, (0x02, sp)
      0080D4 A9 00            [ 1]  146 	adc	a, #0x00
      0080D6 6B 02            [ 1]  147 	ld	(0x02, sp), a
      0080D8 7B 01            [ 1]  148 	ld	a, (0x01, sp)
      0080DA A9 00            [ 1]  149 	adc	a, #0x00
      0080DC 6B 01            [ 1]  150 	ld	(0x01, sp), a
      0080DE 20 C7            [ 2]  151 	jra	00103$
      0080E0                        152 00105$:
      0080E0 5B 08            [ 2]  153 	addw	sp, #8
      0080E2 81               [ 4]  154 	ret
                                    155 ;	main.c: 21: void main(){
                                    156 ;	-----------------------------------------
                                    157 ;	 function main
                                    158 ;	-----------------------------------------
      0080E3                        159 _main:
                                    160 ;	main.c: 22: PB_DDR |= (1 << LED_PIN);
      0080E3 AE 50 07         [ 2]  161 	ldw	x, #0x5007
      0080E6 F6               [ 1]  162 	ld	a, (x)
      0080E7 AA 20            [ 1]  163 	or	a, #0x20
      0080E9 F7               [ 1]  164 	ld	(x), a
                                    165 ;	main.c: 23: PB_CR1 |= (1 << LED_PIN);
      0080EA AE 50 08         [ 2]  166 	ldw	x, #0x5008
      0080ED F6               [ 1]  167 	ld	a, (x)
      0080EE AA 20            [ 1]  168 	or	a, #0x20
      0080F0 F7               [ 1]  169 	ld	(x), a
                                    170 ;	main.c: 25: while (1) {
      0080F1                        171 00102$:
                                    172 ;	main.c: 26: PB_ODR ^= (1 << LED_PIN);
      0080F1 AE 50 05         [ 2]  173 	ldw	x, #0x5005
      0080F4 F6               [ 1]  174 	ld	a, (x)
      0080F5 A8 20            [ 1]  175 	xor	a, #0x20
      0080F7 F7               [ 1]  176 	ld	(x), a
                                    177 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      0080F8 90 5F            [ 1]  178 	clrw	y
      0080FA 5F               [ 1]  179 	clrw	x
      0080FB                        180 00107$:
      0080FB 90 A3 57 C0      [ 2]  181 	cpw	y, #0x57c0
      0080FF 9F               [ 1]  182 	ld	a, xl
      008100 A2 01            [ 1]  183 	sbc	a, #0x01
      008102 9E               [ 1]  184 	ld	a, xh
      008103 A2 00            [ 1]  185 	sbc	a, #0x00
      008105 24 EA            [ 1]  186 	jrnc	00102$
                                    187 ;	main.c: 17: __asm__("nop");
      008107 9D               [ 1]  188 	nop
                                    189 ;	main.c: 16: for(i = 0; i < ((F_CPU / 18000UL) * ms); i++){
      008108 72 A9 00 01      [ 2]  190 	addw	y, #0x0001
      00810C 9F               [ 1]  191 	ld	a, xl
      00810D A9 00            [ 1]  192 	adc	a, #0x00
      00810F 02               [ 1]  193 	rlwa	x
      008110 A9 00            [ 1]  194 	adc	a, #0x00
      008112 95               [ 1]  195 	ld	xh, a
      008113 20 E6            [ 2]  196 	jra	00107$
                                    197 ;	main.c: 27: delay_ms(DELAY);
      008115 81               [ 4]  198 	ret
                                    199 	.area CODE
                                    200 	.area INITIALIZER
                                    201 	.area CABS (ABS)
